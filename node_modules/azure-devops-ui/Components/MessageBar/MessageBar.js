import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./MessageBar.css";
import * as React from "react";
import { css } from '../../Util';
import { Icon } from '../../Icon';
import { Button } from '../../Button';
import { FocusZone } from '../../FocusZone';
import * as Resources from '../../Resources.MessageBar';
export var MessageBar = function (props) {
    var buttonProps = props.buttonProps, className = props.className, _a = props.severity, severity = _a === void 0 ? "Info" /* Info */ : _a, iconProps = props.iconProps, onDismiss = props.onDismiss;
    var severityProps = MessageBarSeverityInternal[severity];
    var severityClassName = severityProps.className;
    var renderIconProps = iconProps || severityProps.defaultIconProps;
    return (React.createElement("div", { className: css(className, "bolt-messagebar", severityClassName) },
        React.createElement("div", { className: "bolt-messagebar-content flex-row" },
            React.createElement(Icon, tslib_1.__assign({}, renderIconProps, { className: css(renderIconProps.className, "bolt-messagebar-icon") })),
            React.createElement("div", { className: "bolt-messagebar-message flex-row flex-shrink" }, props.children),
            (onDismiss || (buttonProps && buttonProps.length > 0)) && (React.createElement(FocusZone, { direction: 1 /* Horizontal */ },
                React.createElement("div", { className: "bolt-messagebar-buttons flex-noshrink flex-row", role: "menubar" },
                    buttonProps && buttonProps.map(function (value, index) { return React.createElement(Button, tslib_1.__assign({ key: index }, value)); }),
                    onDismiss && (React.createElement(Button, { ariaLabel: Resources.DismissButtonLabel, className: "bolt-messagebar-close-button", iconProps: { iconName: "Cancel" }, key: "closeButton", onClick: onDismiss }))))))));
};
/**
 * Internal backing struct maps MessageBarSeverity to the necessary data
 */
var MessageBarSeverityInternal = {
    Info: {
        className: "severity-info",
        defaultIconProps: {
            iconName: "Info"
        }
    },
    Success: {
        className: "severity-success",
        defaultIconProps: { iconName: "Completed" }
    },
    Warning: {
        className: "severity-warning",
        defaultIconProps: { iconName: "Warning" }
    },
    Error: {
        className: "severity-error",
        defaultIconProps: { iconName: "ErrorBadge" }
    }
};
MessageBar.displayName = "MessageBar";
