import { IObservableValue } from '../../Core/Observable';
import { IFocusGroupProps } from '../../FocusGroup';
import { IMenuItem } from '../../Menu';
import { ITooltipProps } from '../../TooltipEx';
import { IFilter } from '../../Utilities/Filter';
export interface IHeaderCommandBar {
}
export interface IHeaderCommandBarItem extends IMenuItem {
    /**
     * An aria label to add to the command bar item.
     */
    ariaLabel?: string;
    /**
     * Indicates that the dropdown chevron should not be shown.
     * Only applies to items that have subMenuProps.
     */
    hideDropdownIcon?: boolean;
    /**
     * A value of true means the item will always be rendered as
     * a button directly in the header.
     * A value of false means the item will always be rendered in
     * an overflow button.
     * Undefined means that the HeaderCommandBar will determine
     * where the item is rendered.
     */
    important?: boolean;
    /**
     * Determines if we render as a primary button or not
     */
    isPrimary?: boolean;
    /**
     * Override the default "menuItem" role for the item
     */
    role?: string;
    /**
     * Uses a subtle button when rendering this item - only applies
     * when the item is not in overflow
     */
    subtle?: boolean;
    /**
     * Optional tooltip props to display
     */
    tooltipProps?: ITooltipProps;
}
export interface IHeaderCommandBarProps {
    /**
     * Additional classes to be applied to component
     */
    className?: string;
    /**
     * Items to display in the far-right Command Bar
     * Should influence page-wide state
     */
    items: IHeaderCommandBarItem[];
}
export interface ICustomHeaderCommandBarProps {
    /**
     * Additional classes to be applied to component
     */
    className?: string;
    /**
     * Focus group props to use in the focus zone that wraps the ButtonGroup
     */
    focusGroupProps?: IFocusGroupProps;
    /**
     * Whether or not the last child is an icon button - will adjust right padding
     */
    lastItemIsIconButton?: boolean;
    /**
     * Optional role to apply to the div containing the command bar, e.g. "menubar"
     */
    role?: string;
}
export interface IHeaderCommandBarWithFilterProps extends IHeaderCommandBarProps {
    /**
     * A filter object to listen to changes on. When there are changes, the filter icon
     * will be displayed as filled.
     */
    filter: IFilter;
    /**
     * The current state of whether the filter is visible or hidden. The value is toggled
     * by the onClick on the item.
     */
    filterToggled: IObservableValue<boolean | undefined>;
}
