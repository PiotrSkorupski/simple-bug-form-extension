import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./SplitButton.css";
import * as React from "react";
import { Button } from '../../Button';
import { ExpandableContainer } from '../../Expandable';
import { FocusZone, FocusZoneContext } from '../../FocusZone';
import { ContextualMenu } from '../../Menu';
import { css } from '../../Util';
export var SplitButton = function (props) {
    var anchor = React.createRef();
    var renderCallout = function (expandable, id, element) {
        return (React.createElement(ContextualMenu, { anchorElement: anchor.current, anchorOrigin: { horizontal: "end" /* end */, vertical: "end" /* end */ }, menuOrigin: { horizontal: "end" /* end */, vertical: "start" /* start */ }, menuProps: props.menuButtonProps.contextualMenuProps.menuProps, onActivate: function (menuItem, event) {
                var contextualMenuProps = props.menuButtonProps.contextualMenuProps;
                if (contextualMenuProps.onActivate) {
                    contextualMenuProps.onActivate(menuItem, event);
                }
                expandable.collapse();
            }, onDismiss: expandable.collapse }));
    };
    return (React.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
        var button = (React.createElement("div", { className: css(props.className, "bolt-split-button flex-stretch inline-flex-row"), ref: anchor },
            React.createElement(Button, tslib_1.__assign({}, props.buttonProps, { className: css("bolt-split-button-main", props.buttonProps.className), disabled: props.disabled, focusZoneId: zoneContext.direction === 2 /* Vertical */ ? zoneContext.focuszoneId : undefined, primary: props.primary, subtle: props.subtle })),
            React.createElement("div", { className: css("bolt-split-button-divider", props.primary && "primary", props.disabled && "disabled") }),
            React.createElement(ExpandableContainer, { renderCallout: renderCallout, disabled: props.disabled, excludeFocusZone: true, excludeTabStop: true },
                React.createElement(Button, tslib_1.__assign({}, props.menuButtonProps, { className: css("bolt-split-button-option flex-self-stretch", props.menuButtonProps.className), disabled: props.disabled, iconProps: {
                        iconName: "ChevronDown"
                    }, primary: props.primary, subtle: props.subtle, text: undefined })))));
        if (zoneContext.direction !== 1 /* Horizontal */) {
            button = React.createElement(FocusZone, { direction: 1 /* Horizontal */ }, button);
        }
        return button;
    }));
};
