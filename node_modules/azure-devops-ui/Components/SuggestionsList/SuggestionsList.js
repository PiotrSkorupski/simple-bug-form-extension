import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./SuggestionsList.css";
import * as React from "react";
import { Observer } from '../../Observer';
import { Spinner } from '../../Spinner';
import { css, getSafeId, preventDefault } from '../../Util';
var SuggestionsItem = /** @class */ (function (_super) {
    tslib_1.__extends(SuggestionsItem, _super);
    function SuggestionsItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onSuggestionClicked = function (ev) {
            if (!ev.isDefaultPrevented()) {
                _this.props.onClick(_this.props);
                ev.preventDefault();
            }
        };
        return _this;
    }
    SuggestionsItem.prototype.render = function () {
        var _a = this.props, renderSuggestion = _a.renderSuggestion, onClick = _a.onClick, className = _a.className, item = _a.item, isSelected = _a.isSelected;
        return (React.createElement("div", { className: css(className, "bolt-suggestions-item flex-row flex-grow cursor-pointer scroll-hidden", isSelected && "bolt-suggestions-isSuggested") },
            React.createElement("div", { onClick: this.onSuggestionClicked, className: "bolt-suggestions-item-button flex-row flex-grow scroll-hidden" }, renderSuggestion(this.props))));
    };
    return SuggestionsItem;
}(React.Component));
export { SuggestionsItem };
var SuggestionsList = /** @class */ (function (_super) {
    tslib_1.__extends(SuggestionsList, _super);
    function SuggestionsList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectedElement = React.createRef();
        return _this;
    }
    SuggestionsList.prototype.render = function () {
        var _a = this.props, className = _a.className, renderNoResultFound = _a.renderNoResultFound, suggestions = _a.suggestions, isLoading = _a.isLoading, loadingText = _a.loadingText;
        // MostRecently Used text should supercede the header text if it's there and available.
        var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;
        return (React.createElement("div", { className: css(className, "bolt-suggestions flex-row flex-grow"), style: this.props.width && { width: this.props.width } }, isLoading ? (React.createElement(Spinner, { className: "bolt-suggestions-spinner flex-grow flex-center justify-center", label: loadingText })) : hasNoSuggestions ? (renderNoResultFound ? (renderNoResultFound()) : (this.noResults())) : (this.renderSuggestions())));
    };
    SuggestionsList.prototype.componentDidMount = function () {
        this.scrollSelected();
    };
    SuggestionsList.prototype.componentDidUpdate = function () {
        this.scrollSelected();
    };
    SuggestionsList.prototype.noResults = function () {
        var noResultsFoundText = this.props.noResultsFoundText;
        return noResultsFoundText ? (React.createElement("div", { role: "alert", className: "bolt-suggestions-none flex-row flex-grow flex-center" }, noResultsFoundText)) : null;
    };
    SuggestionsList.prototype.renderSuggestions = function () {
        var _this = this;
        var _a = this.props, createDefaultItem = _a.createDefaultItem, renderSuggestion = _a.renderSuggestion, onSuggestionClicked = _a.onSuggestionClicked, suggestionsItemClassName = _a.suggestionsItemClassName, resultsMaximumNumber = _a.resultsMaximumNumber, selectedIndex = _a.selectedIndex, suggestions = _a.suggestions, suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel, width = _a.width;
        return (React.createElement(Observer, { suggestions: suggestions, selectedIndex: selectedIndex }, function (props) {
            if (resultsMaximumNumber) {
                props.suggestions = props.suggestions.slice(0, resultsMaximumNumber);
            }
            var sugList = props.suggestions;
            createDefaultItem && sugList.unshift(createDefaultItem(sugList));
            return (React.createElement("div", { "aria-label": suggestionsContainerAriaLabel, className: "bolt-suggestions-container flex-column flex-grow v-scroll-auto h-scroll-hidden", id: getSafeId("suggestion-list"), role: "list", style: width && { width: width } },
                React.createElement("div", { className: "bolt-suggestion-spacer", onMouseDown: preventDefault }),
                props.suggestions.map(function (suggestion, index) {
                    var isSuggested = index === props.selectedIndex;
                    return (React.createElement("div", { key: getSafeId("sug-" + index), ref: isSuggested ? _this.selectedElement : "", role: "listitem" },
                        React.createElement(SuggestionsItem, { className: suggestionsItemClassName, id: getSafeId("sug-item" + index), index: index, isSelected: isSuggested, item: suggestion, onClick: onSuggestionClicked, renderSuggestion: renderSuggestion })));
                }),
                React.createElement("div", { className: "bolt-suggestion-spacer", onMouseDown: preventDefault })));
        }));
    };
    SuggestionsList.prototype.scrollSelected = function () {
        if (this.selectedElement.current && this.selectedElement.current.scrollIntoView !== undefined) {
            this.selectedElement.current.scrollIntoView(false);
        }
    };
    return SuggestionsList;
}(React.Component));
export { SuggestionsList };
