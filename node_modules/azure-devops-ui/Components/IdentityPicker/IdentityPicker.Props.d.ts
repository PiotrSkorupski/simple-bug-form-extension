import { IReadonlyObservableArray } from '../../Core/Observable';
import { IIdentity, IPeoplePickerProvider } from "../IdentityPickerDropdown/SharedIdentityPicker.Props";
export interface IIdentityPickerProps {
    /**
     * String to display when there are no results found.
     */
    noResultsFoundText?: string;
    /**
     * Called when the user clicks or enters on a suggested person
     */
    onIdentityAdded: (tag: IIdentity) => void;
    /**
     * Called when the user removes multiple identities by selecting them and hitting delete
     */
    onIdentitiesRemoved: (identities: IIdentity[]) => void;
    /**
     * Called when the user removes a previously selected person
     */
    onIdentityRemoved: (tag: IIdentity) => void;
    /**
     * Provider to handle how to filter the suggested people from a filter.
     */
    pickerProvider: IPeoplePickerProvider;
    /**
     * String to show when there is no input in the text field.
     */
    placeholderText?: string;
    /**
     * Identity values of the selected identities This prop is 100% controlled
     * by the consumer. onIdentityAdded/onIdentityRemoved/onIdentitiesRemoved must also be implemented in order to
     * work properly. If this value is a array of IIDentities, the prop must be
     * updated to cause the PeoplePicker to re-render. If this value is an
     * ObservableValue, then changing its value will cause the PeoplePicker
     * to re-render.
     */
    selectedIdentities: IReadonlyObservableArray<IIdentity> | IIdentity[];
}
