/// <reference types="react" />
/**
 * Enum which describes which way the children should be laid out
 */
export declare const enum SplitterDirection {
    /**
     * Children will be laid out left to right and divided vertically
     */
    Vertical = 0,
    /**
     * Children will be laid out top to bottom and divided horizontally
     */
    Horizontal = 1
}
/**
 * Enum which describes a position, near or far
 */
export declare const enum SplitterElementPosition {
    /**
     * Left/Top element
     */
    Near = 0,
    /**
     * Right/Bottom element
     */
    Far = 1
}
export interface ISplitterProps {
    /**
     * Optional className to apply to the splitter
     * container div.
     */
    className?: string;
    /**
     * Is the splitter disabled
     */
    disabled?: boolean;
    /**
     * Which element is the fixed element. @default SplitterElementPosition.Far
     */
    fixedElement?: SplitterElementPosition;
    /**
     * The size of the fixed element
     */
    fixedSize?: number;
    /**
     * The initial fixed size, if this element does not have a controlled width. Defaults to 50%
     */
    initialFixedSize?: number;
    /**
     * The minimum size of the fixed element
     */
    minFixedSize?: number;
    /**
     * The maximum size of the fixed element
     */
    maxFixedSize?: number;
    /**
     * The direction of the splitter. @default SplitterDirection.Vertical
     */
    splitterDirection?: SplitterDirection;
    /**
     * Optional classname for the root Splitter near element.
     */
    nearElementClassName?: string;
    /**
     * Optional classname for the root Splitter far element.
     */
    farElementClassName?: string;
    /**
     * Render the content of the near (first) element
     */
    onRenderNearElement?: () => JSX.Element;
    /**
     * Render the content of the far (last) element
     */
    onRenderFarElement?: () => JSX.Element;
    /**
     * Callback for when the fixed size changes
     */
    onFixedSizeChanged?: (newFixedSize: number) => void;
}
