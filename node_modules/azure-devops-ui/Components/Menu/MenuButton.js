import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Menu.css";
import "./MenuButton.css";
import * as React from "react";
import { ExpandableButton } from '../../Button';
import { ContextualMenu } from "./Menu";
var buttonId = 1;
var MenuButton = /** @class */ (function (_super) {
    tslib_1.__extends(MenuButton, _super);
    function MenuButton(props) {
        var _this = _super.call(this, props) || this;
        _this.dropdownButton = React.createRef();
        _this.renderMenu = function (dropdown, dropdownId, anchorElement, anchorOffset, anchorOrigin, anchorPoint, dropdownOrigin) {
            return (React.createElement(ContextualMenu, { anchorElement: anchorElement, anchorOffset: _this.props.contextualMenuProps.anchorOffset || anchorOffset, anchorOrigin: _this.props.contextualMenuProps.anchorOrigin || anchorOrigin, anchorPoint: _this.props.contextualMenuProps.anchorPoint || anchorPoint, fixedLayout: _this.props.contextualMenuProps.fixedLayout, menuOrigin: _this.props.contextualMenuProps.menuOrigin || dropdownOrigin, menuProps: _this.props.contextualMenuProps.menuProps, onActivate: function (menuItem, event) {
                    var contextualMenuProps = _this.props.contextualMenuProps;
                    if (contextualMenuProps.onActivate) {
                        contextualMenuProps.onActivate(menuItem, event);
                    }
                    dropdown.collapse();
                }, onDismiss: dropdown.collapse }));
        };
        _this.state = {
            id: _this.props.id || "menu-button-" + buttonId++
        };
        return _this;
    }
    MenuButton.prototype.render = function () {
        var _a = this.props, contextualMenuProps = _a.contextualMenuProps, hideDropdownIcon = _a.hideDropdownIcon;
        return (React.createElement(ExpandableButton, tslib_1.__assign({}, Object.assign({}, this.props, { menuProps: undefined }), { anchorElement: contextualMenuProps.anchorElement, anchorOffset: contextualMenuProps.anchorOffset, anchorOrigin: contextualMenuProps.anchorOrigin, anchorPoint: contextualMenuProps.anchorPoint, dropdownId: contextualMenuProps.menuProps.id, dropdownOrigin: contextualMenuProps.menuOrigin, hideDropdownIcon: hideDropdownIcon, id: this.state.id, ref: this.dropdownButton, renderCallout: this.renderMenu }), this.props.children));
    };
    MenuButton.prototype.focus = function () {
        if (this.dropdownButton.current) {
            this.dropdownButton.current.focus();
        }
    };
    return MenuButton;
}(React.Component));
export { MenuButton };
