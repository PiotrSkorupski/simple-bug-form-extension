import "../../CommonImports";
import "../../Core/core.css";
import "./Table.css";
import * as React from "react";
import { ObservableValue } from '../../Core/Observable';
import { Checkbox, TriStateCheckbox } from '../../Checkbox';
import { Observer } from '../../Observer';
import { css, preventDefault } from '../../Util';
/**
 * ColumnSelect is used to render additional selection ui for a given row.
 *
 * This renders a fixed width column that contains a checkbox in the header
 * as well as each row that represents the selection state of the row. It
 * also allows the user to change the selection state. The header checkbox
 * is used to set the state of all rows in the table to the same state.
 *
 */
var ColumnSelect = /** @class */ (function () {
    function ColumnSelect() {
        var _this = this;
        this.columnLayout = 0 /* none */;
        this.id = "_select";
        this.width = 40;
        this.columnSelectBehavior = {
            initialize: function (props) {
                _this.itemProvider = props.tableProps.itemProvider;
                _this.selection = props.tableProps.selection;
            },
            componentDidMount: function (props) {
                _this.componentDidMount(props);
            },
            componentDidUpdate: function (props) {
                _this.componentDidUpdate(props);
            },
            componentWillUnmount: function () {
                _this.componentWillUnmount();
            }
        };
        this.allSelected = new ObservableValue(false);
        this.behaviors = [this.columnSelectBehavior];
        this.renderCell = function (rowIndex, columnIndex, listColumn) {
            var selection = _this.selection;
            var selected = selection && selection.selected(rowIndex);
            return (React.createElement("td", { key: "col-select", "aria-colindex": columnIndex, className: css("bolt-table-cell-select bolt-table-cell-compact bolt-table-cell bolt-list-cell", "col-" + columnIndex), "data-column-index": columnIndex, onClick: preventDefault, onDoubleClick: preventDefault, onMouseDown: function (event) {
                    var selection = _this.selection;
                    if (selection) {
                        if (selection.selected(rowIndex)) {
                            selection.unselect(rowIndex);
                        }
                        else {
                            selection.select(rowIndex, 1, true);
                        }
                    }
                    event.preventDefault();
                } },
                React.createElement("div", { className: css("flex-row justify-center") },
                    React.createElement("span", { className: "flex-row-inline" },
                        React.createElement(Checkbox, { checked: !!selected, excludeTabStop: true, excludeFocusZone: true })))));
        };
        this.renderHeaderCell = function (columnIndex, listColumn, focuszoneId) {
            return (React.createElement("td", { key: "col-select", className: css("bolt-table-cell-select bolt-table-cell-compact bolt-table-header-cell", "col-header-" + columnIndex), "data-column-index": columnIndex },
                React.createElement("div", { className: "flex-row" },
                    React.createElement(Observer, { allSelected: _this.allSelected }, function (props) {
                        var _a = _this, itemProvider = _a.itemProvider, selection = _a.selection;
                        // Get the total number of items within the list.
                        var itemCount = itemProvider && itemProvider.length;
                        return (React.createElement("div", { className: "flex-row flex-grow justify-center" }, selection && selection.multiSelect && itemCount !== -1 && (React.createElement(TriStateCheckbox, { checked: props.allSelected, focuszoneId: focuszoneId, onChange: _this.onChangeHeader }))));
                    }))));
        };
        this.onChangeHeader = function (event) {
            _this.toggleSelectAll();
        };
        this.onSelectionChange = function () {
            var _a = _this, itemProvider = _a.itemProvider, selection = _a.selection;
            if (selection) {
                var selectedCount = selection.selectedCount;
                var itemCount = itemProvider && itemProvider.length - selection.unselectableCount;
                if (selectedCount > 0) {
                    if (selectedCount === itemCount) {
                        _this.allSelected.value = true;
                    }
                    else {
                        _this.allSelected.value = undefined;
                    }
                }
                else {
                    _this.allSelected.value = false;
                }
            }
        };
    }
    ColumnSelect.prototype.componentDidMount = function (props) {
        var selection = this.selection;
        // We need to know about changes to the selection to manage the selectAll state.
        if (selection) {
            selection.subscribe(this.onSelectionChange);
            this.onSelectionChange();
        }
    };
    ColumnSelect.prototype.componentDidUpdate = function (props) {
        var selection = this.selection;
        if (selection && selection !== props.tableProps.selection) {
            selection.unsubscribe(this.onSelectionChange);
        }
        selection = props.tableProps.selection;
        this.selection = selection;
        if (selection) {
            selection.subscribe(this.onSelectionChange);
            this.onSelectionChange();
        }
    };
    ColumnSelect.prototype.componentWillUnmount = function () {
        var selection = this.selection;
        if (selection) {
            selection.unsubscribe(this.onSelectionChange);
        }
    };
    ColumnSelect.prototype.toggleSelectAll = function () {
        var _a = this, itemProvider = _a.itemProvider, selection = _a.selection;
        if (selection) {
            if (this.allSelected.value !== false) {
                selection.clear();
            }
            else {
                selection.select(0, itemProvider && itemProvider.length);
            }
        }
    };
    return ColumnSelect;
}());
export { ColumnSelect };
