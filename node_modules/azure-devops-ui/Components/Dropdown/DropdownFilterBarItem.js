import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Dropdown.css";
import * as React from "react";
import { ObservableLike } from '../../Core/Observable';
import * as Utils_Accessibility from '../../Core/Util/Accessibility';
import { FilterBarItem } from '../../FilterBarItem';
import { ListSelection } from '../../List';
import { getListBoxItemsValue, wrapListBoxItems } from '../../ListBox';
import { SelectionObserver } from '../../Observer';
import * as Resources from '../../Resources.Dropdown';
import { arrayEquals, css } from '../../Util';
import { DropdownSelection } from '../../Utilities/DropdownSelection';
import { compareSelectionRanges } from '../../Utilities/Selection';
import { Dropdown } from "./Dropdown";
var DropdownFilterBarItem = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownFilterBarItem, _super);
    function DropdownFilterBarItem(props) {
        var _this = _super.call(this, props) || this;
        _this.dropdown = React.createRef();
        _this.onClearClick = function () {
            _this.selection.clear();
            Utils_Accessibility.announce(Resources.AnnounceFilterCleared);
        };
        _this.onSelectionChanged = function (values) {
            var items = getListBoxItemsValue(_this.props.items, _this.wrappedItems);
            var selectedValues = [];
            for (var rangeIndex = 0; rangeIndex < values.length; rangeIndex++) {
                for (var i = values[rangeIndex].beginIndex; i <= values[rangeIndex].endIndex; i++) {
                    selectedValues.push(items[i].data !== undefined ? items[i].data : items[i].id);
                }
            }
            if (_this.props.filter) {
                var currentState = _this.props.filter.getFilterItemState(_this.props.filterItemKey);
                var changesToSet = false;
                if (currentState) {
                    changesToSet = !arrayEquals(currentState.value, selectedValues);
                }
                else {
                    changesToSet = !!selectedValues.length;
                }
                if (changesToSet) {
                    _this.setFilterValue({ value: selectedValues });
                }
            }
            return true;
        };
        _this.renderSelectedItems = function (selection, items) {
            var selectedText = items[selection.value[0].beginIndex].text || "";
            if (selection.selectedCount > 1) {
                selectedText = selectedText + " (+" + (selection.selectedCount - 1) + ")";
            }
            var selectedTextSpan = React.createElement("span", { className: "bolt-dropdown-filter-bar-item-selected-text" }, selectedText);
            return _this.props.showPlaceholderAsLabel ? (React.createElement(React.Fragment, null,
                React.createElement("span", { className: "bolt-dropdown-filter-bar-item-placeholder" }, _this.props.placeholder + ": "),
                selectedTextSpan)) : (selectedTextSpan);
        };
        _this.selection = props.selection || new DropdownSelection();
        _this.wrappedItems = wrapListBoxItems(props.items);
        return _this;
    }
    DropdownFilterBarItem.prototype.focus = function () {
        if (this.dropdown.current) {
            this.dropdown.current.focus();
        }
    };
    DropdownFilterBarItem.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        // Select the default items from the filter.
        if (this.props.filter) {
            var filterState_1 = this.props.filter.getFilterItemState(this.props.filterItemKey);
            if (filterState_1 && filterState_1.value) {
                var items = getListBoxItemsValue(this.props.items, this.wrappedItems);
                var _loop_1 = function (i) {
                    var index = items.findIndex(function (item) { return item.id === filterState_1.value[i] || item.data === filterState_1.value[i]; });
                    this_1.selection.select(index, 1, true);
                };
                var this_1 = this;
                for (var i = 0; i < filterState_1.value.length; i++) {
                    _loop_1(i);
                }
            }
        }
    };
    DropdownFilterBarItem.prototype.render = function () {
        var _this = this;
        return (React.createElement(SelectionObserver, { selection: this.selection, onSelectionChanged: this.onSelectionChanged }, function () {
            var actionsFromProps = ObservableLike.getValue(_this.props.actions || []);
            var actions = actionsFromProps.slice();
            if (!_this.props.hideClearAction) {
                actions.push({
                    className: "bolt-dropdown-action-right-button",
                    disabled: _this.selection.selectedCount === 0,
                    iconProps: { iconName: "Clear" },
                    text: Resources.DropdownClearActionText,
                    onClick: _this.onClearClick
                });
            }
            return (React.createElement(Dropdown, tslib_1.__assign({}, _this.props, { actions: actions, buttonClassName: css(_this.props.buttonClassName, "bolt-dropdown-filter-bar-item"), labelClassName: css(_this.props.labelClassName, "bolt-dropdown-filter-bar-item-label"), selection: _this.selection, ref: _this.dropdown, renderSelectedItems: _this.props.renderSelectedItems || _this.renderSelectedItems })));
        }));
    };
    DropdownFilterBarItem.prototype.onFilterChanged = function (filterState) {
        _super.prototype.onFilterChanged.call(this, filterState);
        if (filterState && filterState.value) {
            var newSelection = new ListSelection(this.selection.multiSelect);
            var items = getListBoxItemsValue(this.props.items, this.wrappedItems);
            var _loop_2 = function (i) {
                var index = items.findIndex(function (item) { return item.id === filterState.value[i] || item.data === filterState.value[i]; });
                newSelection.select(index, 1, true);
            };
            for (var i = 0; i < filterState.value.length; i++) {
                _loop_2(i);
            }
            var selectionDifference = compareSelectionRanges(this.selection.value, newSelection.value);
            if (selectionDifference.length) {
                this.selection.value = newSelection.value;
            }
        }
        else {
            this.selection.clear();
        }
    };
    return DropdownFilterBarItem;
}(FilterBarItem));
export { DropdownFilterBarItem };
