/// <reference types="react" />
import { IReadonlyObservableArray } from '../../Core/Observable';
import { IButtonProps } from '../../Button';
import { IFilterBarItemProps } from '../../FilterBarItem';
import { IListSelection } from '../../List';
import { IListBoxItem, IListBoxSharedProps } from '../../ListBox';
import { IItemProvider } from '../../Utilities/Provider';
export interface IDropdown {
    collapse(): void;
    expand(): void;
}
export interface IDropdownProps<T> extends IListBoxSharedProps<T> {
    /**
     * Actions to render in the footer of the dropdown.
     */
    actions?: IReadonlyObservableArray<IButtonProps> | IButtonProps[];
    /**
     * Adds aria-label to the DropdownButton element.
     */
    ariaLabel?: string;
    /**
     * ClassName to pass to the DropdownButton.
     */
    buttonClassName?: string;
    /**
     * ClassName to pass to the callout content.  Use this to override the width.
     */
    calloutContentClassName?: string;
    /**
     * Optional method to perform a custom filter of items based on filter text.
     * If not provided, it will filter items based on item.text.
     */
    filterItem?: (filterText: string, item: IListBoxItem<T>, items: IListBoxItem<T>[]) => boolean;
    /**
     * Provide if you want to show a custom set of items when the filter box is being used.
     */
    filteredItems?: IItemProvider<IListBoxItem<T>> | IListBoxItem<T>[];
    /**
     * If hideDropdownIcon is supplied the DropdownButton will hide its dropdown arrow.
     */
    hideDropdownIcon?: boolean;
    /**
     * ClassName to pass to the label container.
     */
    labelClassName?: string;
    /**
     * Text to show when there are no items in the listbox.
     */
    noItemsText?: string;
    /**
     * onClick to pass to the DropdownButton.
     */
    onClick?: (event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;
    /**
     * Optional callback to call when the dropdown is collapsed.
     */
    onCollapse?: () => void;
    /**
     * Optional callback to call when the dropdown is expanded.
     */
    onExpand?: () => void;
    /**
     * A callback to notify when the filter text has changed.  Do custom searching here and update the items.
     */
    onFilterTextChanged?: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | null, newValue: string) => void;
    /**
     * Text to show within the DropdownButton when there is no selected value.
     */
    placeholder?: string;
    /**
     * Optional custom renderer for selected items.
     */
    renderSelectedItems?: (selection: IListSelection, items: IListBoxItem<T>[]) => JSX.Element | string;
    /**
     * Text to display when there are no filter results.  Will be formatted with the current filter string.
     */
    filteredNoResultsText?: string;
    /**
     * Set to true to show a filter box above the listBox, or false to hide.  The filter box will show by default
     * If there are 10 or more items in the dropdown.
     */
    showFilterBox?: boolean;
}
export interface IDropdownFilterBarItemProps<T> extends IFilterBarItemProps, IDropdownProps<T> {
    /**
     * Don't show the Clear action.
     */
    hideClearAction?: boolean;
    /**
     * Set to true to include the placeholder as part of the selected label.
     */
    showPlaceholderAsLabel?: boolean;
}
