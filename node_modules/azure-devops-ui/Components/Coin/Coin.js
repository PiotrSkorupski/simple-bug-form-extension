import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Coin.css";
import * as React from "react";
import { Tooltip } from '../../TooltipEx';
import { css } from '../../Util';
import { getColorString } from '../../Utilities/Color';
import { getInitialsColorFromName, getInitialsFromName } from "./Coin.Initials";
/**
 * Renders a user's profile/identity/avatar image.
 */
var Coin = /** @class */ (function (_super) {
    tslib_1.__extends(Coin, _super);
    function Coin(props) {
        var _this = _super.call(this, props) || this;
        _this.onImageError = function (event) {
            _this.setState({ imageError: true });
        };
        _this.onLoad = function (event) {
            _this.setState({ imageLoaded: true });
        };
        _this.handleKeyDown = function (e) {
            if (e.keyCode === 13 /* enter */ || e.keyCode === 32 /* space */) {
                _this.props.onClick && _this.props.onClick();
            }
        };
        _this.state = {
            imageError: false,
            imageLoaded: false,
            showIdentityCard: false
        };
        return _this;
    }
    Coin.prototype.render = function () {
        var _a = this.props, className = _a.className, displayName = _a.displayName, dataIsFocusable = _a.dataIsFocusable, onClick = _a.onClick, isTabStop = _a.isTabStop, _b = _a.imgAltText, imgAltText = _b === void 0 ? "" : _b, imageUrl = _a.imageUrl;
        var sizeClass = this.getSizeCss();
        // Set the focus and aria-expand attributes based on props passed
        var additionalAttributes = {};
        if (dataIsFocusable) {
            additionalAttributes["data-is-focusable"] = true;
        }
        if (isTabStop) {
            additionalAttributes["tabIndex"] = 0;
        }
        // Setting the aria related properties and user action delegates only if there is a renderIdentityCard callback
        if (onClick) {
            additionalAttributes["onKeyDown"] = this.handleKeyDown;
            additionalAttributes["onClick"] = onClick;
        }
        additionalAttributes["aria-label"] = displayName;
        var backgroundColor = getInitialsColorFromName(displayName);
        var initialsIdentity = (React.createElement("div", { className: css("bolt-coin-content", sizeClass), style: backgroundColor && { background: getColorString(backgroundColor) } },
            React.createElement("span", null, getInitialsFromName(displayName))));
        var imageElement = imageUrl !== undefined && !this.state.imageError ? (React.createElement(React.Fragment, null,
            React.createElement("img", { className: css("bolt-coin-content using-image", sizeClass, !this.state.imageLoaded && "pending-load-image"), src: imageUrl, alt: imgAltText, onError: this.onImageError, onLoad: this.onLoad }),
            !this.state.imageLoaded && initialsIdentity)) : (initialsIdentity);
        // Getting the reference to the div around the image because the Callout within IdentityCard has positioning problems in some cases when passing in img element as the target
        return (React.createElement(React.Fragment, null,
            React.createElement(Tooltip, { text: displayName, showOnFocus: true },
                React.createElement("div", tslib_1.__assign({ className: css("bolt-coin flex-noshrink", className, sizeClass, onClick && "cursor-pointer") }, additionalAttributes), imageElement))));
    };
    Coin.prototype.getSizeCss = function () {
        switch (this.props.size) {
            case 0 /* extraExtraSmall */:
                return "extra-extra-small";
            case 1 /* extraSmall */:
                return "extra-small";
            case 2 /* extraSmallPlus */:
                return "extra-small-plus";
            case 3 /* small */:
                return "small";
            case 4 /* smallPlus */:
                return "small-plus";
            case 5 /* medium */:
                return "medium";
            case 6 /* mediumPlus */:
                return "medium-plus";
            case 7 /* large */:
                return "large";
            case 8 /* extraLarge */:
                return "extra-large";
            case 9 /* extraExtraLarge */:
                return "extra-extra-large";
            default:
                return "medium";
        }
    };
    return Coin;
}(React.Component));
export { Coin };
