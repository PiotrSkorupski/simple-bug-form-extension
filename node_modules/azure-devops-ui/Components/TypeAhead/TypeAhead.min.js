import*as tslib_1 from"tslib";import"../../CommonImports";import"../../Core/core.css";import*as React from"react";import{TextField}from"../TextField/TextField";import{ObservableLike}from"../../Core/Observable";import{css}from"../../Util";var TypeAhead=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.textFieldRef=React.createRef(),t.autofillEnabled=!0,t.select=function(){t.textFieldRef.current.select()},t.onKeyDown=function(e){if(t.props.onKeyDown&&t.props.onKeyDown(e),!e.isDefaultPrevented()){var s=t.props.suggestedValue&&ObservableLike.getValue(t.props.suggestedValue),o=t.props.value&&ObservableLike.getValue(t.props.value);switch(e.which){case 9:s&&o!==s&&t.autofillEnabled&&t.props.onAutoComplete&&(t.props.onAutoComplete(s),e.preventDefault());break;case 8:case 46:t.autofillEnabled=!1;break;default:t.autofillEnabled=!0}}},t}return tslib_1.__extends(t,e),t.prototype.subscribeAll=function(e){var t=this;ObservableLike.subscribe(e.value,function(){return t.forceUpdate()}),ObservableLike.subscribe(e.suggestedValue,function(){return t.forceUpdate()})},t.prototype.unsubscribeAll=function(e){var t=this;ObservableLike.unsubscribe(e.value,function(){return t.forceUpdate()}),ObservableLike.unsubscribe(e.suggestedValue,function(){return t.forceUpdate()})},t.prototype.componentDidMount=function(){this.subscribeAll(this.props)},t.prototype.componentWillUnmount=function(){this.unsubscribeAll(this.props)},t.prototype.componentWillReceiveProps=function(e){this.unsubscribeAll(this.props),this.subscribeAll(e)},t.prototype.focus=function(){this.textFieldRef.current.focus()},t.prototype.setSelectionRange=function(e,t,s){this.textFieldRef.current.setSelectionRange(e,t,s)},t.prototype.render=function(){var e=this.props,t=e.value,s=e.suggestedValue,o=e.className,r=this.autofillEnabled?s:t;return React.createElement(TextField,tslib_1.__assign({},this.props,{className:css(o,"bolt-typeahead"),onKeyDown:this.onKeyDown,ref:this.textFieldRef,value:r}))},t.prototype.componentDidUpdate=function(){var e=this.props.suggestedValue&&ObservableLike.getValue(this.props.suggestedValue),t=this.props.value&&ObservableLike.getValue(this.props.value);e&&this.autofillEnabled&&(t&&e.startsWith(t)?this.textFieldRef.current.setSelectionRange(t.length,e.length,"backward"):t||this.textFieldRef.current.setSelectionRange(0,e.length))},t}(React.Component);export{TypeAhead};