import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import * as React from "react";
import { MasterDetailsContext } from '../../MasterDetailsContext';
import { Observer } from '../../Observer';
import { Surface } from '../../Surface';
import { SingleLayerMasterPanel, SingleLayerMasterPanelHeader } from "../SingleLayerMasterPanel/SingleLayerMasterPanel";
/**
 * Context-controlled implementation of MasterDetails MasterPanel that allows for arbitrary layers of drill-down
 * If you don't need drill-down behavior, @see SingleLayerMasterPanel instead
 */
export var MasterPanel = function (props) {
    var className = props.className, showOnSmallScreens = props.showOnSmallScreens;
    var contentElement = React.useRef(null);
    var masterDetailsContext = React.useContext(MasterDetailsContext);
    var onMasterDetailsPayloadChange = function () {
        contentElement.current && contentElement.current.scrollTo(0, 0);
        return true;
    };
    return (React.createElement(Surface, { background: 1 /* neutral */ },
        React.createElement(Observer, { masterDetailsLayer: { observableValue: masterDetailsContext.getCurrentLayer(), filter: onMasterDetailsPayloadChange } }, function (observerProps) {
            var masterPanelDetails = observerProps.masterDetailsLayer.masterPanelContent;
            var parentItem = observerProps.masterDetailsLayer.parentItem;
            var selectedItemObservable = observerProps.masterDetailsLayer.selectedMasterItem;
            var renderHeader = masterPanelDetails.renderHeader
                ? function () {
                    return masterPanelDetails.renderHeader(parentItem);
                }
                : undefined;
            var renderSearch = masterPanelDetails.renderSearch
                ? function () {
                    return masterPanelDetails.renderSearch(parentItem);
                }
                : undefined;
            var renderContent = masterPanelDetails.renderContent
                ? function () {
                    return masterPanelDetails.renderContent(parentItem, selectedItemObservable);
                }
                : undefined;
            return (React.createElement(SingleLayerMasterPanel, { key: "master-panel-" + observerProps.masterDetailsLayer.key, className: className, contentRef: contentElement, renderContent: renderContent, renderHeader: renderHeader, renderSearch: renderSearch, showOnSmallScreens: showOnSmallScreens }));
        })));
};
export var MasterPanelHeader = function (props) {
    var masterDetailsContext = React.useContext(MasterDetailsContext);
    var masterPanelDetails = masterDetailsContext.getCurrentLayer().value.masterPanelContent;
    var onBackClick = function () {
        var shouldPop = masterPanelDetails.onBackButtonClick && masterPanelDetails.onBackButtonClick();
        if (shouldPop !== false) {
            masterDetailsContext.pop();
        }
    };
    return React.createElement(SingleLayerMasterPanelHeader, tslib_1.__assign({}, props, { onBackButtonClick: masterPanelDetails.hideBackButton !== false ? onBackClick : undefined }));
};
