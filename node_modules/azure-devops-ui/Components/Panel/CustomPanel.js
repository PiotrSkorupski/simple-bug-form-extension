import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Panel.css";
import * as React from "react";
import { Callout } from '../../Callout';
import { FocusZone } from '../../FocusZone';
import { Surface, SurfaceContext } from '../../Surface';
import { css, isArrowKey } from '../../Util';
var CustomPanel = /** @class */ (function (_super) {
    tslib_1.__extends(CustomPanel, _super);
    function CustomPanel(props) {
        var _this = _super.call(this, props) || this;
        // TODO: Change to false in M150
        _this.state = {
            isDisplayed: true
        };
        return _this;
    }
    CustomPanel.prototype.render = function () {
        var props = this.props;
        var _a = props.size, size = _a === void 0 ? 1 /* Medium */ : _a;
        var isDisplayed = this.state.isDisplayed;
        return (React.createElement(Callout, { ariaLabel: props.ariaLabel, blurDismiss: props.blurDismiss, className: css("bolt-panel", this.props.calloutClassName, isDisplayed === false && "no-events"), contentClassName: css(props.contentClassName, "bolt-panel-callout-content relative scroll-auto flex-grow", isDisplayed ? "in" : "out"), contentJustification: 3 /* Stretch */, contentLocation: 2 /* End */, contentOrientation: 0 /* Column */, contentShadow: true, contentSize: size, escDismiss: props.escDismiss, id: props.id, lightDismiss: props.lightDismiss && isDisplayed !== false, modal: props.modal && isDisplayed !== false, onDismiss: props.onDismiss },
            React.createElement(SurfaceContext.Consumer, null, function (surfaceContext) { return (React.createElement(Surface, tslib_1.__assign({}, surfaceContext, { spacing: 1 /* default */ }),
                React.createElement(FocusZone, { circularNavigation: true, defaultActiveElement: props.defaultActiveElement || ".bolt-panel-focus-element", focusOnMount: true, handleTabKey: true, includeDefaults: true, preprocessKeyStroke: function (event) {
                        return isArrowKey(event) ? 2 /* IgnoreParents */ : 1 /* IgnoreNone */;
                    } },
                    React.createElement("div", { className: css(props.className, "bolt-panel-focus-element flex-column flex-grow scroll-hidden"), tabIndex: -1 }, props.children)))); })));
    };
    // TODO: Uncomment in M150
    /* public componentDidMount() {
        setTimeout(() => {
            this.setState({ isDisplayed: true });
        }, 0);
    }

    public componentWillUnmount() {
        if($DEBUG) {
            if(this.state.isDisplayed === true) {
                console.error("Panel was unmounted while still displayed; call animateOut first and unmount after the returned promise resolves");
            }
        }
    } */
    CustomPanel.prototype.animateOut = function () {
        return Promise.resolve();
        // TODO: Uncomment in M150
        /* return new Promise(resolve => {
            this.setState({ isDisplayed: false });

            setTimeout(() => {
                resolve();
            }, 200);
        }); */
    };
    CustomPanel.defaultProps = {
        escDismiss: true,
        lightDismiss: true,
        modal: true
    };
    return CustomPanel;
}(React.Component));
export { CustomPanel };
