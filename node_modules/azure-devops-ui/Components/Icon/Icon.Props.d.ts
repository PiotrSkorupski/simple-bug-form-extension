import * as React from "react";
import { ITooltipProps } from '../../TooltipEx';
export interface IIconProps {
    /**
     * Optional aria-describedBy
     */
    ariaDescribedBy?: string;
    /**
     * Optional aria-hidden
     */
    ariaHidden?: string;
    /**
     * label that can be added to the icon to help assistive technology understand
     * the meaning of the icon.
     */
    ariaLabel?: string;
    /**
     * Optional classname to add to the Icon component. If the user wants to use
     * an icon that is not coming from the fabric font the className should
     * contain the font-family and the character to display.
     */
    className?: string;
    /**
     * The iconName of the fabric icon to show. Only specify an iconName when the
     * icon is coming from the fabric icon font.
     */
    iconName?: string;
    /**
     * Optional id for the root element
     */
    id?: string;
    /**
     * A unique identifier for this component.
     */
    key?: string;
    /**
     * Optional click handler for the icon
     */
    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * Optional mousedown handler for the icon.
     */
    onMouseDown?: (event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * Allows for arbitrary content to be rendered instead of using an icon from
     * the fabric icon font. A common scenario would be rendering something like a
     * status icon in place of a font icon. We want to allow for scenarios that
     * expect iconProps to work, but still allow for custom components to be rendered.
     */
    render?: (className?: string) => JSX.Element;
    /**
     * Optional aria role
     */
    role?: string;
    /**
     * Extra styles that should be added to the element, this supports dynamic
     * styles that couldn't be defined statically in CSS.
     */
    style?: React.CSSProperties;
    /**
     * Optional tabindex
     */
    tabIndex?: number;
    /**
     * Optional title
     */
    title?: string;
    /**
     * Optional tooltip to show when the icon is hovered.
     */
    tooltipProps?: ITooltipProps;
}
