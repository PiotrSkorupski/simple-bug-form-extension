import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./TextField.css";
import * as React from "react";
import { Observer } from '../../Observer';
import { css, getSafeId } from '../../Util';
import { Icon } from '../../Icon';
import { FormItemContext } from '../../FormItem';
import { FocusWithin } from '../../FocusWithin';
import { FocusZoneContext } from '../../FocusZone';
import { getTabIndex } from '../../Utilities/Focus';
var inputId = 1;
var TextField = /** @class */ (function (_super) {
    tslib_1.__extends(TextField, _super);
    function TextField(props) {
        var _this = _super.call(this, props) || this;
        _this.inputElement = React.createRef();
        _this.select = function () {
            if (_this.inputElement.current) {
                _this.inputElement.current.select();
            }
        };
        _this.onInputChange = function (e) {
            var onChange = _this.props.onChange;
            if (onChange) {
                onChange(e, e.target.value);
            }
            _this.adjustInputHeight();
        };
        _this.inputId = "textfield-input-" + inputId++;
        return _this;
    }
    TextField.prototype.componentDidMount = function () {
        this.adjustInputHeight();
    };
    TextField.prototype.focus = function () {
        if (this.inputElement.current) {
            this.inputElement.current.focus();
        }
    };
    TextField.prototype.setSelectionRange = function (start, end, direction) {
        if (this.inputElement.current) {
            this.inputElement.current.setSelectionRange(start, end, direction);
        }
    };
    TextField.prototype.render = function () {
        var _this = this;
        var _a = this.props, activatable = _a.activatable, ariaExpanded = _a.ariaExpanded, ariaHasPopup = _a.ariaHasPopup, ariaLabel = _a.ariaLabel, autoAdjustHeight = _a.autoAdjustHeight, autoComplete = _a.autoComplete, autoFocus = _a.autoFocus, className = _a.className, containerClassName = _a.containerClassName, disabled = _a.disabled, _b = _a.focusTreatment, focusTreatment = _b === void 0 ? 0 /* all */ : _b, inputClassName = _a.inputClassName, inputId = _a.inputId, inputType = _a.inputType, label = _a.label, maxLength = _a.maxLength, multiline = _a.multiline, onBlur = _a.onBlur, onClick = _a.onClick, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, onKeyPress = _a.onKeyPress, onKeyUp = _a.onKeyUp, placeholder = _a.placeholder, prefixIconProps = _a.prefixIconProps, readOnly = _a.readOnly, required = _a.required, resizable = _a.resizable, role = _a.role, rows = _a.rows, spellCheck = _a.spellCheck, style = _a.style, value = _a.value, width = _a.width;
        var _c = this.props, ariaDescribedBy = _c.ariaDescribedBy, suffixIconProps = _c.suffixIconProps;
        var input = (React.createElement(FocusWithin, { onFocus: onFocus, onBlur: onBlur }, function (focusStatus) { return (React.createElement(FormItemContext.Consumer, null, function (formItemContext) {
            var TagName = multiline ? "textarea" : "input";
            var tagSpecificProps = multiline ? { rows: rows } : { type: inputType, autoComplete: autoComplete ? "on" : "off" };
            if (suffixIconProps === undefined && formItemContext.error) {
                suffixIconProps = {
                    className: "bolt-textfield-message-error",
                    iconName: "Error"
                };
            }
            if (ariaDescribedBy === undefined) {
                ariaDescribedBy = formItemContext.ariaDescribedById;
            }
            return (React.createElement("div", { className: css("flex-column", containerClassName, width !== "auto" /* auto */ && width) },
                React.createElement("div", { className: css(!label && className, "bolt-textfield flex-row flex-center", disabled && "disabled", focusTreatment === 0 /* all */ && "focus-treatment", focusTreatment === 1 /* keyboardOnly */ && "focus-keyboard-only", focusStatus.hasFocus && "focused", style === 1 /* inline */ && "bolt-textfield-inline", formItemContext.error && "bolt-textfield-error") },
                    React.createElement(FocusZoneContext.Consumer, null, function (zoneContext) { return (React.createElement(Observer, { value: value || "" }, function (observedProps) { return (React.createElement(React.Fragment, null,
                        prefixIconProps &&
                            Icon(tslib_1.__assign({}, prefixIconProps, { className: css(prefixIconProps.className, "prefix", !prefixIconProps.render && "bolt-textfield-icon", ((placeholder && !observedProps.value) || prefixIconProps.render) &&
                                    "bolt-textfield-no-text") })),
                        React.createElement(TagName, tslib_1.__assign({}, tagSpecificProps, { "aria-describedby": getSafeId(ariaDescribedBy), "aria-disabled": disabled, "aria-expanded": ariaExpanded, "aria-haspopup": ariaHasPopup, "aria-label": ariaLabel, "aria-labelledby": getSafeId(formItemContext.ariaLabelledById), autoFocus: autoFocus, "data-focuszone": !disabled && !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined, disabled: disabled, className: css(inputClassName, "bolt-textfield-input flex-grow", autoAdjustHeight && "bolt-textfield-auto-adjust", resizable && "bolt-textfield-auto-unresizable", prefixIconProps && "bolt-textfield-input-with-prefix", suffixIconProps && "bolt-textfield-input-with-suffix", activatable && "activatable"), id: getSafeId(inputId || _this.inputId), maxLength: maxLength, onBlur: focusStatus.onBlur, onClick: onClick, onChange: _this.onInputChange, onFocus: focusStatus.onFocus, onKeyDown: onKeyDown, onKeyPress: onKeyPress, onKeyUp: onKeyUp, placeholder: placeholder, readOnly: readOnly, required: required, ref: _this.inputElement, role: role, spellCheck: spellCheck, tabIndex: getTabIndex(_this.props), value: observedProps.value })),
                        suffixIconProps &&
                            Icon(tslib_1.__assign({}, suffixIconProps, { className: css(suffixIconProps.className, "suffix", !suffixIconProps.render && "bolt-textfield-icon", ((placeholder && !observedProps.value) || suffixIconProps.render) &&
                                    "bolt-textfield-no-text") })))); })); }))));
        })); }));
        if (label) {
            return (React.createElement("div", { className: css(className, "flex-column") },
                React.createElement("label", { htmlFor: getSafeId(inputId || this.inputId), className: "bolt-textfield-label" }, label),
                input));
        }
        else {
            return input;
        }
    };
    TextField.prototype.adjustInputHeight = function () {
        if (this.props.multiline && this.props.autoAdjustHeight && this.inputElement.current) {
            this.inputElement.current.style.height = "";
            this.inputElement.current.style.height = this.inputElement.current.scrollHeight + "px";
        }
    };
    return TextField;
}(React.Component));
export { TextField };
