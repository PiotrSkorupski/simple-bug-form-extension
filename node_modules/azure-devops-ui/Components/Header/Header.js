import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Header.css";
import * as React from "react";
import { CustomHeader } from "./CustomHeader";
import { HeaderDescription } from "./HeaderDescription";
import { HeaderIcon } from "./HeaderIcon";
import { HeaderTitle } from "./HeaderTitle";
import { HeaderTitleArea } from "./HeaderTitleArea";
import { HeaderTitleRow } from "./HeaderTitleRow";
import { Button } from '../../Button';
import { HeaderCommandBar } from '../../HeaderCommandBar';
import { Observer } from '../../Observer';
import { TabProviderContext } from '../../Tabs';
import { css } from '../../Util';
var Header = /** @class */ (function (_super) {
    tslib_1.__extends(Header, _super);
    function Header() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Header.prototype.render = function () {
        var _this = this;
        return (React.createElement(TabProviderContext.Consumer, null, function (tabProviderContext) {
            var _a = _this.props, backButtonProps = _a.backButtonProps, className = _a.className, commandBarClassName = _a.commandBarClassName, description = _a.description, descriptionClassName = _a.descriptionClassName, title = _a.title, titleAriaLevel = _a.titleAriaLevel, titleClassName = _a.titleClassName, titleIconProps = _a.titleIconProps, titleSize = _a.titleSize;
            var commandBarItems = _this.props.commandBarItems || tabProviderContext.commandBarItems;
            var commandBarComponent = undefined;
            if (commandBarItems) {
                commandBarComponent = (React.createElement(Observer, { items: commandBarItems },
                    React.createElement(HeaderCommandBar, { className: commandBarClassName, items: [] })));
            }
            return (React.createElement(CustomHeader, { className: css(className, commandBarItems && commandBarItems.length > 0 && "bolt-header-with-commandbar", backButtonProps && "bolt-header-with-back-button"), separator: _this.props.separator },
                backButtonProps && (React.createElement(Button, tslib_1.__assign({ iconProps: { iconName: "Back" }, subtle: true }, backButtonProps, { className: css(backButtonProps.className, "bolt-header-back-button font-size-ml") }))),
                titleIconProps && React.createElement(HeaderIcon, { iconProps: titleIconProps, titleSize: titleSize }),
                React.createElement(HeaderTitleArea, null,
                    React.createElement(HeaderTitleRow, null, title && (React.createElement(HeaderTitle, { ariaLevel: titleAriaLevel, className: titleClassName, titleSize: titleSize }, title))),
                    description && React.createElement(HeaderDescription, { className: descriptionClassName }, description),
                    _this.props.children),
                commandBarComponent));
        }));
    };
    return Header;
}(React.Component));
export { Header };
