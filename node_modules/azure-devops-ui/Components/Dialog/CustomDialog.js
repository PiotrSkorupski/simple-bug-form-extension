import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Dialog.css";
import * as React from "react";
import { Callout } from '../../Callout';
import { FocusZone } from '../../FocusZone';
import { Surface, SurfaceContext } from '../../Surface';
import { css, isArrowKey } from '../../Util';
var CustomDialog = /** @class */ (function (_super) {
    tslib_1.__extends(CustomDialog, _super);
    function CustomDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomDialog.prototype.render = function () {
        var _this = this;
        var _a = this.props, ariaLabel = _a.ariaLabel, blurDismiss = _a.blurDismiss, calloutClassName = _a.calloutClassName, className = _a.className, calloutContentClassName = _a.calloutContentClassName, contentJustification = _a.contentJustification, contentLocation = _a.contentLocation, defaultActiveElement = _a.defaultActiveElement, escDismiss = _a.escDismiss, id = _a.id, lightDismiss = _a.lightDismiss, onDismiss = _a.onDismiss, modal = _a.modal, _b = _a.contentSize, contentSize = _b === void 0 ? 1 /* Medium */ : _b;
        return (React.createElement(Callout, { ariaLabel: ariaLabel, blurDismiss: blurDismiss, className: css(calloutClassName, "bolt-dialog-callout"), contentClassName: css(calloutContentClassName, "bolt-dialog-callout-content relative scroll-auto"), contentJustification: contentJustification, contentLocation: contentLocation, contentOrientation: 0 /* Column */, contentShadow: true, contentSize: contentSize, id: id, escDismiss: escDismiss, lightDismiss: lightDismiss, modal: modal, onDismiss: onDismiss },
            React.createElement(SurfaceContext.Consumer, null, function (surfaceContext) { return (React.createElement(Surface, tslib_1.__assign({}, surfaceContext, { spacing: 1 /* default */ }),
                React.createElement(FocusZone, { circularNavigation: true, defaultActiveElement: defaultActiveElement || ".bolt-dialog-focus-element", focusOnMount: true, handleTabKey: true, includeDefaults: true, preprocessKeyStroke: function (event) {
                        return isArrowKey(event) ? 2 /* IgnoreParents */ : 1 /* IgnoreNone */;
                    } },
                    React.createElement("div", { className: css(className, "bolt-dialog-focus-element flex-column flex-grow scroll-hidden"), tabIndex: -1 }, _this.props.children)))); })));
    };
    CustomDialog.defaultProps = {
        contentJustification: 1 /* Center */,
        contentLocation: 1 /* Center */,
        escDismiss: true,
        lightDismiss: true
    };
    return CustomDialog;
}(React.Component));
export { CustomDialog };
