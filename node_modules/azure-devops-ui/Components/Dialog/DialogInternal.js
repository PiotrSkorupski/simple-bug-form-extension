import * as tslib_1 from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./Dialog.css";
import * as React from "react";
import { PanelHeader, PanelFooter } from '../../Panel';
import { SurfaceContext } from '../../Surface';
import { css } from '../../Util';
import { CustomDialog } from "./CustomDialog";
var DialogInternal = /** @class */ (function (_super) {
    tslib_1.__extends(DialogInternal, _super);
    function DialogInternal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogInternal.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, footerButtonProps = _a.footerButtonProps, lightDismiss = _a.lightDismiss, modal = _a.modal, contentLocation = _a.contentLocation, contentJustification = _a.contentJustification, showCloseButton = _a.showCloseButton;
        var _b = this.props, ariaLabel = _b.ariaLabel, blurDismiss = _b.blurDismiss, calloutClassName = _b.calloutClassName, calloutContentClassName = _b.calloutContentClassName, defaultActiveElement = _b.defaultActiveElement, escDismiss = _b.escDismiss, id = _b.id, onDismiss = _b.onDismiss, contentSize = _b.contentSize;
        // for compat, remove in M148
        var calloutProps = this.props.calloutProps;
        if (calloutProps) {
            ariaLabel = calloutProps.ariaLabel;
            blurDismiss = calloutProps.blurDismiss;
            calloutClassName = calloutProps.calloutClassName;
            calloutContentClassName = calloutProps.contentClassName;
            defaultActiveElement = calloutProps.defaultActiveElement;
            escDismiss = calloutProps.escDismiss;
            id = calloutProps.id;
            onDismiss = calloutProps.onDismiss;
            contentSize = calloutProps.size;
        }
        var titleProps = tslib_1.__assign({}, this.props.titleProps);
        if (titleProps.size === undefined) {
            titleProps.size = 2 /* Small */;
        }
        return (React.createElement(CustomDialog, { ariaLabel: ariaLabel, blurDismiss: blurDismiss, calloutClassName: calloutClassName, calloutContentClassName: calloutContentClassName, contentLocation: contentLocation, contentJustification: contentJustification, className: css("bolt-dialog", className), defaultActiveElement: defaultActiveElement, escDismiss: escDismiss, id: id, lightDismiss: lightDismiss, modal: modal, onDismiss: onDismiss, contentSize: contentSize },
            React.createElement(PanelHeader, { onDismiss: onDismiss, closeButtonSize: 0 /* small */, showCloseButton: showCloseButton, showSeparator: false, titleProps: titleProps }),
            React.createElement(SurfaceContext.Consumer, null, function (surfaceContext) { return (React.createElement("div", { className: css("bolt-dialog-content flex-column flex-grow", !footerButtonProps && "bolt-dialog-content-bottom-padding", surfaceContext.horizontalClassName) }, _this.props.children)); }),
            footerButtonProps && React.createElement(PanelFooter, { showSeparator: false, buttonProps: footerButtonProps })));
    };
    DialogInternal.defaultProps = {
        showCloseButton: false
    };
    return DialogInternal;
}(React.Component));
export { DialogInternal };
