import { ICalloutProps } from '../../Callout';
import { IButtonProps } from '../../Button';
import { IPanelTitleProps } from '../../Panel';
export interface ICustomDialogProps extends Pick<ICalloutProps, "ariaLabel" | "blurDismiss" | "contentJustification" | "contentLocation" | "contentSize" | "escDismiss" | "id" | "lightDismiss" | "modal"> {
    /**
     * css className that should be applied to the top level callout element.
     */
    calloutClassName?: string;
    /**
     * css className that should be applied to the callout's content element.
     */
    calloutContentClassName?: string;
    /**
     * An optional className to pass to the root dialog element
     */
    className?: string;
    /**
     * Element selector of the first focusable element. If no selector is supplied a hidden
     * element will be created and focus given to the CommandBarFlyout through this element.
     */
    defaultActiveElement?: string | (() => string);
    /**
     * Method that is called when the dialog is dismissed.
     */
    onDismiss: () => void;
}
export interface IDialogProps extends ICustomDialogProps {
    /**
     * An optional list of props to render as Buttons in the footer.
     */
    footerButtonProps?: IButtonProps[];
    /**
     * Properties to configure how the dialog title looks.
     */
    titleProps: IPanelTitleProps;
    /**
     * Shows a close button in the top right corner of the dialog.  Using a cancel button in
     * the footer or lightDismiss are preffered over this.
     */
    showCloseButton?: boolean;
}
export declare type ICornerDialogProps = Pick<IDialogProps, Exclude<keyof IDialogProps, "contentJustification" | "contentLocation" | "escDismiss" | "lightDismiss" | "modal" | "showCloseButton">>;
