import { IVssRestClientOptions } from "../Common/Context";
import { RestClientBase } from "../Common/RestClientBase";
import * as ServiceEndpoint from "../ServiceEndpoint/ServiceEndpoint";
export declare class ServiceEndpointRestClient extends RestClientBase {
    constructor(options: IVssRestClientOptions);
    static readonly RESOURCE_AREA_ID: string;
    /**
     * Returns list of azure subscriptions
     *
     */
    getAzureManagementGroups(): Promise<ServiceEndpoint.AzureManagementGroupQueryResult>;
    /**
     * Returns list of azure subscriptions
     *
     */
    getAzureSubscriptions(): Promise<ServiceEndpoint.AzureSubscriptionQueryResult>;
    /**
     * Proxy for a GET request defined by a service endpoint.
     *
     * @param serviceEndpointRequest - Service endpoint request.
     * @param project - Project ID or project name
     * @param endpointId - Id of the service endpoint.
     */
    executeServiceEndpointRequest(serviceEndpointRequest: ServiceEndpoint.ServiceEndpointRequest, project: string, endpointId: string): Promise<ServiceEndpoint.ServiceEndpointRequestResult>;
    /**
     * Proxy for a GET request defined by a service endpoint. The request is authorized using a data source in service endpoint. The response is filtered using an XPath/Json based selector.
     *
     * @param binding - Describes the data source to fetch.
     * @param project - Project ID or project name
     */
    queryServiceEndpoint(binding: ServiceEndpoint.DataSourceBinding, project: string): Promise<string[]>;
    /**
     * Create a service endpoint.
     *
     * @param endpoint - Service endpoint to create.
     * @param project - Project ID or project name
     */
    createServiceEndpoint(endpoint: ServiceEndpoint.ServiceEndpoint, project: string): Promise<ServiceEndpoint.ServiceEndpoint>;
    /**
     * Delete a service endpoint.
     *
     * @param project - Project ID or project name
     * @param endpointId - Id of the service endpoint to delete.
     * @param deep - Specific to AzureRM endpoint created in Automatic flow. When set to true, this will also delete corresponding AAD application in Azure. Default value is true.
     */
    deleteServiceEndpoint(project: string, endpointId: string, deep?: boolean): Promise<void>;
    /**
     * Get the service endpoint details.
     *
     * @param project - Project ID or project name
     * @param endpointId - Id of the service endpoint.
     */
    getServiceEndpointDetails(project: string, endpointId: string): Promise<ServiceEndpoint.ServiceEndpoint>;
    /**
     * Get the service endpoints.
     *
     * @param project - Project ID or project name
     * @param type - Type of the service endpoints.
     * @param authSchemes - Authorization schemes used for service endpoints.
     * @param endpointIds - Ids of the service endpoints.
     * @param owner - Owner for service endpoints.
     * @param includeFailed - Failed flag for service endpoints.
     * @param includeDetails - Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests
     */
    getServiceEndpoints(project: string, type?: string, authSchemes?: string[], endpointIds?: string[], owner?: string, includeFailed?: boolean, includeDetails?: boolean): Promise<ServiceEndpoint.ServiceEndpoint[]>;
    /**
     * Get the service endpoints by name.
     *
     * @param project - Project ID or project name
     * @param endpointNames - Names of the service endpoints.
     * @param type - Type of the service endpoints.
     * @param authSchemes - Authorization schemes used for service endpoints.
     * @param owner - Owner for service endpoints.
     * @param includeFailed - Failed flag for service endpoints.
     * @param includeDetails - Flag to include more details for service endpoints. This is for internal use only and the flag will be treated as false for all other requests
     */
    getServiceEndpointsByNames(project: string, endpointNames: string[], type?: string, authSchemes?: string[], owner?: string, includeFailed?: boolean, includeDetails?: boolean): Promise<ServiceEndpoint.ServiceEndpoint[]>;
    /**
     * Update a service endpoint.
     *
     * @param endpoint - Service endpoint to update.
     * @param project - Project ID or project name
     * @param endpointId - Id of the service endpoint to update.
     * @param operation - Operation for the service endpoint.
     */
    updateServiceEndpoint(endpoint: ServiceEndpoint.ServiceEndpoint, project: string, endpointId: string, operation?: string): Promise<ServiceEndpoint.ServiceEndpoint>;
    /**
     * Update the service endpoints.
     *
     * @param endpoints - Names of the service endpoints to update.
     * @param project - Project ID or project name
     */
    updateServiceEndpoints(endpoints: ServiceEndpoint.ServiceEndpoint[], project: string): Promise<ServiceEndpoint.ServiceEndpoint[]>;
    /**
     * Get service endpoint execution records.
     *
     * @param project - Project ID or project name
     * @param endpointId - Id of the service endpoint.
     * @param top - Number of service endpoint execution records to get.
     */
    getServiceEndpointExecutionRecords(project: string, endpointId: string, top?: number): Promise<ServiceEndpoint.ServiceEndpointExecutionRecord[]>;
    /**
     * Add service endpoint execution records.
     *
     * @param input - Service endpoint execution records to add.
     * @param project - Project ID or project name
     */
    addServiceEndpointExecutionRecords(input: ServiceEndpoint.ServiceEndpointExecutionRecordsInput, project: string): Promise<ServiceEndpoint.ServiceEndpointExecutionRecord[]>;
    /**
     * @param configurationParams -
     */
    createOAuthConfiguration(configurationParams: ServiceEndpoint.OAuthConfigurationParams): Promise<ServiceEndpoint.OAuthConfiguration>;
    /**
     * @param configurationId -
     */
    deleteOAuthConfiguration(configurationId: string): Promise<ServiceEndpoint.OAuthConfiguration>;
    /**
     * @param configurationId -
     */
    getOAuthConfiguration(configurationId: string): Promise<ServiceEndpoint.OAuthConfiguration>;
    /**
     * @param endpointType -
     * @param actionFilter -
     */
    getOAuthConfigurations(endpointType?: string, actionFilter?: ServiceEndpoint.OAuthConfigurationActionFilter): Promise<ServiceEndpoint.OAuthConfiguration[]>;
    /**
     * @param configurationParams -
     * @param configurationId -
     */
    updateOAuthConfiguration(configurationParams: ServiceEndpoint.OAuthConfigurationParams, configurationId: string): Promise<ServiceEndpoint.OAuthConfiguration>;
    /**
     * @param endpointId -
     * @param project -
     */
    querySharedProjects(endpointId: string, project: string): Promise<ServiceEndpoint.ProjectReference[]>;
    /**
     * @param endpointId -
     * @param fromProject -
     * @param withProject -
     */
    shareEndpointWithProject(endpointId: string, fromProject: string, withProject: string): Promise<void>;
    /**
     * Get service endpoint types.
     *
     * @param type - Type of service endpoint.
     * @param scheme - Scheme of service endpoint.
     */
    getServiceEndpointTypes(type?: string, scheme?: string): Promise<ServiceEndpoint.ServiceEndpointType[]>;
    /**
     * @param authenticationRequest -
     */
    acquireAccessToken(authenticationRequest: ServiceEndpoint.AadOauthTokenRequest): Promise<ServiceEndpoint.AadOauthTokenResult>;
    /**
     * @param tenantId -
     * @param redirectUri -
     * @param promptOption -
     * @param completeCallbackPayload -
     * @param completeCallbackByAuthCode -
     */
    createAadOAuthRequest(tenantId: string, redirectUri: string, promptOption?: ServiceEndpoint.AadLoginPromptOption, completeCallbackPayload?: string, completeCallbackByAuthCode?: boolean): Promise<string>;
    /**
     */
    getVstsAadTenantId(): Promise<string>;
}
