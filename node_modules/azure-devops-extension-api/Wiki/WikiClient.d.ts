import { IVssRestClientOptions } from "../Common/Context";
import { RestClientBase } from "../Common/RestClientBase";
import * as Git from "../Git/Git";
import * as Wiki from "../Wiki/Wiki";
export declare class WikiRestClient extends RestClientBase {
    constructor(options: IVssRestClientOptions);
    static readonly RESOURCE_AREA_ID: string;
    /**
     * Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the \`Accept\` header sent in the request.
     *
     * @param project - Project ID or project name
     * @param wikiIdentifier - Wiki Id or name.
     * @param path - Wiki page path.
     * @param recursionLevel - Recursion level for subpages retrieval. Defaults to \`None\` (Optional).
     * @param versionDescriptor - GitVersionDescriptor for the page. Defaults to the default branch (Optional).
     * @param includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)
     */
    getPageText(project: string, wikiIdentifier: string, path?: string, recursionLevel?: Git.VersionControlRecursionType, versionDescriptor?: Git.GitVersionDescriptor, includeContent?: boolean): Promise<string>;
    /**
     * Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the \`Accept\` header sent in the request.
     *
     * @param project - Project ID or project name
     * @param wikiIdentifier - Wiki Id or name.
     * @param path - Wiki page path.
     * @param recursionLevel - Recursion level for subpages retrieval. Defaults to \`None\` (Optional).
     * @param versionDescriptor - GitVersionDescriptor for the page. Defaults to the default branch (Optional).
     * @param includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)
     */
    getPageZip(project: string, wikiIdentifier: string, path?: string, recursionLevel?: Git.VersionControlRecursionType, versionDescriptor?: Git.GitVersionDescriptor, includeContent?: boolean): Promise<ArrayBuffer>;
    /**
     * Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the \`Accept\` header sent in the request.
     *
     * @param project - Project ID or project name
     * @param wikiIdentifier - Wiki Id or name.
     * @param id - Wiki page id.
     * @param recursionLevel - Recursion level for subpages retrieval. Defaults to \`None\` (Optional).
     * @param includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)
     */
    getPageByIdText(project: string, wikiIdentifier: string, id: number, recursionLevel?: Git.VersionControlRecursionType, includeContent?: boolean): Promise<string>;
    /**
     * Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the \`Accept\` header sent in the request.
     *
     * @param project - Project ID or project name
     * @param wikiIdentifier - Wiki Id or name.
     * @param id - Wiki page id.
     * @param recursionLevel - Recursion level for subpages retrieval. Defaults to \`None\` (Optional).
     * @param includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)
     */
    getPageByIdZip(project: string, wikiIdentifier: string, id: number, recursionLevel?: Git.VersionControlRecursionType, includeContent?: boolean): Promise<ArrayBuffer>;
    /**
     * Creates a new page view stats resource or updates an existing page view stats resource.
     *
     * @param project - Project ID or project name
     * @param wikiIdentifier - Wiki name or Id.
     * @param wikiVersion - Wiki version.
     * @param path - Wiki page path.
     * @param oldPath - Old page path. This is optional and required to rename path in existing page view stats.
     */
    createOrUpdatePageViewStats(project: string, wikiIdentifier: string, wikiVersion: Git.GitVersionDescriptor, path: string, oldPath?: string): Promise<Wiki.WikiPageViewStats>;
    /**
     * Creates the wiki resource.
     *
     * @param wikiCreateParams - Parameters for the wiki creation.
     * @param project - Project ID or project name
     */
    createWiki(wikiCreateParams: Wiki.WikiCreateParametersV2, project?: string): Promise<Wiki.WikiV2>;
    /**
     * Deletes the wiki corresponding to the wiki name or Id provided.
     *
     * @param wikiIdentifier - Wiki name or Id.
     * @param project - Project ID or project name
     */
    deleteWiki(wikiIdentifier: string, project?: string): Promise<Wiki.WikiV2>;
    /**
     * Gets all wikis in a project or collection.
     *
     * @param project - Project ID or project name
     */
    getAllWikis(project?: string): Promise<Wiki.WikiV2[]>;
    /**
     * Gets the wiki corresponding to the wiki name or Id provided.
     *
     * @param wikiIdentifier - Wiki name or id.
     * @param project - Project ID or project name
     */
    getWiki(wikiIdentifier: string, project?: string): Promise<Wiki.WikiV2>;
    /**
     * Updates the wiki corresponding to the wiki Id or name provided using the update parameters.
     *
     * @param updateParameters - Update parameters.
     * @param wikiIdentifier - Wiki name or Id.
     * @param project - Project ID or project name
     */
    updateWiki(updateParameters: Wiki.WikiUpdateParameters, wikiIdentifier: string, project?: string): Promise<Wiki.WikiV2>;
}
