import { IVssRestClientOptions } from "../Common/Context";
import { RestClientBase } from "../Common/RestClientBase";
import * as FileContainer from "../FileContainer/FileContainer";
import * as WebApi from "../WebApi/WebApi";
export declare class FileContainerRestClient extends RestClientBase {
    constructor(options: IVssRestClientOptions);
    /**
     * Creates the specified items in in the referenced container.
     *
     * @param items -
     * @param containerId -
     * @param scope - A guid representing the scope of the container. This is often the project id.
     */
    createItems(items: WebApi.VssJsonCollectionWrapperV<FileContainer.FileContainerItem[]>, containerId: number, scope?: string): Promise<FileContainer.FileContainerItem[]>;
    /**
     * Deletes the specified items in a container.
     *
     * @param containerId - Container Id.
     * @param itemPath - Path to delete.
     * @param scope - A guid representing the scope of the container. This is often the project id.
     */
    deleteItem(containerId: number, itemPath: string, scope?: string): Promise<void>;
    /**
     * Gets containers filtered by a comma separated list of artifact uris within the same scope, if not specified returns all containers
     *
     * @param scope - A guid representing the scope of the container. This is often the project id.
     * @param artifactUris -
     */
    getContainers(scope?: string, artifactUris?: string): Promise<FileContainer.FileContainer[]>;
    /**
     * @param containerId -
     * @param scope -
     * @param itemPath -
     * @param metadata -
     * @param format -
     * @param downloadFileName -
     * @param includeDownloadTickets -
     * @param isShallow -
     */
    getItems(containerId: number, scope?: string, itemPath?: string, metadata?: boolean, format?: string, downloadFileName?: string, includeDownloadTickets?: boolean, isShallow?: boolean): Promise<FileContainer.FileContainerItem[]>;
}
